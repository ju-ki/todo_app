// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  userId String @unique
  name String
  imageUrl String @db.Text
  email String @db.Text
  userWorkSpaces UserWorkSpace[]
  taskAssignment TaskAssignments[]
  notifications Notification[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model WorkSpace {
  id String @id @default(uuid())
  title String
  inviteCode String
  tasks Task[]
  userWorkSpaces UserWorkSpace[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model UserWorkSpace {
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId String
  workSpace WorkSpace @relation(fields: [workSpaceId], references: [id], onDelete: Cascade)
  workSpaceId String
  role MemberRole @default(GUEST)
  createdAt DateTime @default(now())

  @@id([userId, workSpaceId])
}

enum TaskStatus {
  TODO
  DOING
  DONE
  WAITING
}

enum TaskLabel {
  HIGH
  MEDIUM
  LOW
}

model Task {
  taskId String @id @default(uuid())
  title String
  description String
  status TaskStatus @default(TODO)
  label TaskLabel @default(MEDIUM)
  workSpaceId String
  workSpace WorkSpace @relation(fields: [workSpaceId], references: [id], onDelete: Cascade)
  taskAssignments TaskAssignments[]
  notificationId String?
  notifications Notification[]
  dueDate DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}



enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}


model TaskAssignments {
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId String
  task Task @relation(fields: [taskId], references: [taskId], onDelete: Cascade)
  taskId String
  @@index([userId, taskId])
}


model Notification {
  id String @id @default(uuid())
  userId String
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
  taskId String
  task Task @relation(fields: [taskId], references: [taskId], onDelete: Cascade)
  isRead Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([userId, taskId])
}